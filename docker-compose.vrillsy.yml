version: "3.9"
services:
  redis:
    image: redis:7-alpine
    healthcheck:
      test: ["CMD","redis-cli","ping"]
      interval: 5s
      timeout: 3s
      retries: 12
    restart: unless-stopped
    ports:
      - "6379:6379"

  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    environment:
      - ENV=dev
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      redis:
        condition: service_healthy
    # UÅ¼ywamy zdrowego "health_merged" bez grzebania w main.py
    command: ["python","-m","uvicorn","app.health_merged:app","--host","0.0.0.0","--port","8000"]
    ports:
      - "127.0.0.1:18000:8000"
    restart: unless-stopped

  worker:
    build:
      context: .
      dockerfile: worker/Dockerfile
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - NUMBA_CACHE_DIR=/tmp/numba_cache
    user: "1000:1000"
    volumes:
      - /home/akex/reels-generator/inputs:/app/inputs
      - /home/akex/reels-generator/outputs:/app/outputs
    depends_on:
      redis:
        condition: service_healthy
    # Tworzymy cache numby i odpalamy workera na kolejce "vrillsy"
    entrypoint: ["/bin/sh","-lc","mkdir -p \"$NUMBA_CACHE_DIR\" && chmod 777 \"$NUMBA_CACHE_DIR\" && exec celery -A app.celery_app:celery_app worker -l INFO -Q vrillsy"]
    restart: unless-stopped
